"""
Target Problem:
---------------
* A classifier for the diagnosis of Autism Spectrum Disorder (ASD)

Proposed Solution (Machine Learning Pipeline):
----------------------------------------------
* Constant Feature Elimination -> PCA -> Decision Tree

Input to Proposed Solution:
---------------------------
* Directories of training and testing data in csv file format
* These two types of data should be stored in n x m pattern in csv file format.

  Typical Example:
  ----------------
  n x m samples in training csv file (n number of samples, m - 1 number of features, ground truth labels at last column)
  k x s samples in testing csv file (k number of samples, s number of features)

* These data set files are ready by load_data() function.
* For comprehensive information about input format, please check the section
  "Data Sets and Usage Format of Source Codes" in README.md file on github.

Output of Proposed Solution:
----------------------------
* Predictions generated by learning model for testing set
* They are stored in "submission.csv" file.

Code Owner:
-----------
* Copyright © Team 10. All rights reserved.
* Copyright © Istanbul Technical University, Learning From Data Spring 2019. All rights reserved. """

import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.tree import DecisionTreeClassifier

np.random.seed(3)  # anchoring randomization during training step


def load_data(traname, testname):

    """
    The method reads train and test data from dataset files.

    Parameters
    ----------
    traname: directory of training dataset file
    testname: directory of testing dataset file

    """
    train_data = pd.read_csv(traname)
    test_data = pd.read_csv(testname)
    return train_data, test_data


def preprocessing(train_data, test_data):

    """
    * The method at first eliminates constant features from both train and test data.
    * Then, it splits training data into features and labels.
    * Finally, the method performs pca on training and testing data sets to reduce the dimension and
      overcome curse of dimensionality problem.

    Parameters
    ----------
    train_data: training data set in data frame format
    test_data: testing data set in data frame format

    """

    # constant feature elimination
    train_data = train_data.drop(['X3', 'X31', 'X32', 'X127', 'X128', 'X590'], axis=1)
    train_data = np.asarray(train_data)

    test_data = test_data.drop(['X3', 'X31', 'X32', 'X127', 'X128', 'X590'], axis=1)
    test_data = np.asarray(test_data)

    # training data is split into features and labels
    train_x = train_data[:, :train_data.shape[1] - 1]
    train_y = train_data[:, train_data.shape[1] - 1]
    train_y.shape = (np.size(train_y), 1)

    # principal component analysis
    pca = PCA(n_components=60)
    train_x_pca = pca.fit_transform(train_x)
    test_pca = pca.transform(test_data)

    return train_x_pca, train_y, test_pca


def train_model(train_x, train_y):

    """
    The method creates a learning model, and trains it by using training data.

    Parameters
    ----------
    train_x: features of training data
    train_y: labels of training data

    """

    clf = DecisionTreeClassifier(max_depth=3, max_features=11, random_state=9)
    clf.fit(train_x, train_y)
    return clf


def predict(model, test_x):

    """
    The method predicts labels for testing data samples by using trained learning model.

    Parameters
    ----------
    model: trained learning model
    test_x: features of testing data

    """

    predictions = model.predict(test_x)
    return predictions


def write_output(ytest):
    yt = pd.DataFrame(ytest, dtype='int32')
    yt.columns = ["Predicted"]
    yt.index += 1
    yt.to_csv("./submission.csv", index_label="ID")
    return


# ********** MAIN PROGRAM ********** #

trainfile = "train.csv"
testfile = "test.csv"

train_data, test_data = load_data(trainfile, testfile)
train_x, train_y, test_x = preprocessing(train_data, test_data)

model = train_model(train_x, train_y)
predictions = predict(model, test_x)
write_output(predictions)
