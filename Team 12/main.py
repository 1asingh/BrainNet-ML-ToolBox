"""
Target Problem:
---------------
* A classifier for the diagnosis of Autism Spectrum Disorder (ASD)

Proposed Solution (Machine Learning Pipeline):
----------------------------------------------
* PCA -> SVC

Input to Proposed Solution:
---------------------------
* Directories of training and testing data in csv file format
* These two types of data should be stored in n x m pattern in csv file format.

  Typical Example:
  ----------------
  n x m samples in training csv file (n number of samples, m - 1 number of features, ground truth labels at last column)
  k x s samples in testing csv file (k number of samples, s number of features)

* These data set files are ready by load_data() function.
* For comprehensive information about input format, please check the section
  "Data Sets and Usage Format of Source Codes" in README.md file on github.

Output of Proposed Solution:
----------------------------
* Predictions generated by learning model for testing set
* They are stored in "submission.csv" file.

Code Owner:
-----------
* Copyright © Team 12. All rights reserved.
* Copyright © Istanbul Technical University, Learning From Data Spring 2019. All rights reserved. """

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

from sklearn import svm
from sklearn.decomposition import PCA

plt.style.use('ggplot')


def load_data():

    """
    The method reads train and test data from data set files.
    Then, it splits train data set into features and labels.

    """

    train_set = np.array(pd.read_csv("train.csv"))
    test_set = np.array(pd.read_csv("test.csv"))

    train_x = train_set[:, :train_set.shape[1] - 1]
    train_y = train_set[:, train_set.shape[1] - 1]

    return train_x, train_y, test_set


def preprocessing(x_tra, x_tst):

    """
    * The method reduces dimension of training and testing data set by using PCA.

    Parameters
    ----------
    x_tra: features of training data
    x_tst: features of testing data
    """

    pca = PCA(n_components=5)
    x_tra_new = pca.fit_transform(x_tra)
    x_tst_new = pca.transform(x_tst)

    return x_tra_new, x_tst_new


def train_model(x_train, y_train):

    """
    The method creates a learning model and trains it by using training dataset

    Parameters
    ----------
    x_train: features of training data
    y_train: labels of training data
    """

    model = svm.SVC(kernel='linear')
    model.fit(x_train, y_train)
    return model


def predict(model, x_tst):

    """
    The method predicts the labels for testing data samples by using trained learning model.

    Parameters
    ----------
    model: trained learning model
    x_tst: features of testing data

    """

    predictions = model.predict(x_tst)
    return predictions


def write_output(predictions):

    ind = [x for x in range(1, len(predictions) + 1)]

    temp = pd.DataFrame(data=ind, columns=['ID'])
    temp2 = pd.DataFrame(data=predictions, columns=['Predicted'])

    y_pred = pd.concat([temp, temp2], axis=1)
    y_pred = y_pred.astype({"ID": int, "Predicted": int})
    y_pred.to_csv("submission.csv", index=False, float_format="%.0f")


# ********** MAIN PROGRAM ********** #

train_x, train_y, test_set = load_data()
x_tra_new, x_tst_new = preprocessing(train_x, test_set)

model = train_model(x_tra_new, train_y)
predictions = predict(model, x_tst_new)
write_output(predictions)
