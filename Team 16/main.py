"""
Target Problem:
---------------
* A classifier for the diagnosis of Autism Spectrum Disorder (ASD)

Proposed Solution (Machine Learning Pipeline):
----------------------------------------------
* SelectKBest Algorithm -> PCA -> KNN

Input to Proposed Solution:
---------------------------
* Directories of training and testing data in csv file format
* These two types of data should be stored in n x m pattern in csv file format.

  Typical Example:
  ----------------
  n x m samples in training csv file (n number of samples, m - 1 number of features, ground truth labels at last column)
  k x s samples in testing csv file (k number of samples, s number of features)

* These data set files are ready by load_data() function.
* For comprehensive information about input format, please check the section
  "Data Sets and Usage Format of Source Codes" in README.md file on github.

Output of Proposed Solution:
----------------------------
* Predictions generated by learning model for testing set
* They are stored in "submission.csv" file.

Code Owner:
-----------
* Copyright © Team 16. All rights reserved.
* Copyright © Istanbul Technical University, Learning From Data Spring 2019. All rights reserved. """

import numpy as np
import pandas as pd

from sklearn.decomposition import PCA
from sklearn.feature_selection import chi2
from sklearn.feature_selection import SelectKBest
from sklearn.neighbors import KNeighborsClassifier


def load_data(paths):

    """
    The method reads train and test data set from their data set files.
    The directory of the files are passed to the function via the parameter "paths".

    Parameters
    ----------
    paths: it is an array collecting directory paths of train and test data.
    """

    train_data = pd.read_csv(paths[0])
    test_data = pd.read_csv(paths[1])

    y_train = train_data["class"]
    x_train = train_data
    x_train.drop("class", axis=1, inplace=True)

    return x_train, y_train, test_data


def preprocessing(x_train, y_train, x_test):

    """
    The method performs two dimensionality reduction methods: SelectKBest and PCA
    By using SelectKBest algorithm, it chooses top 80 features with highest chi square value.
    Then, this method synthesizes 5 new features for training and testing data by using PCA.
    Totally, the data sets are reduced to 5-dimensional space.

    Parameters
    ----------
    x_train: features of train data
    y_train: labels of train data
    x_test: features of test data
    """

    selector = SelectKBest(chi2, k=80)
    selector.fit(x_train, y_train)

    x_train_reduced = selector.transform(x_train)
    x_test_reduced = selector.transform(x_test)

    pca = PCA(n_components=5)
    pca.fit(x_train_reduced)

    x_train_reduced = pca.transform(x_train_reduced)
    x_test_reduced = pca.transform(x_test_reduced)

    return x_train_reduced, x_test_reduced


def train_model(x_train, y_train):

    """
    The method trains KNN classification model by using training data set.
    Then, It returns trained learning model.

    Parameters
    ----------
    x_train: features of train data
    y_train: labels of train data
    """

    clf = KNeighborsClassifier(n_neighbors=7)
    clf.fit(x_train, y_train)
    return clf


def predict(model, x_test):

    """
    The method predicts labels for testing data samples.

    Parameters
    ----------
    model: trained learning model (KNN)
    x_test: features of testing data
    """
    return model.predict(x_test)


def write_output(myPredict):
    ID = np.arange(1, len(myPredict) + 1)
    predictID = list(zip(ID, myPredict))
    predictID = pd.DataFrame(predictID, columns=['ID', 'Predicted'])
    predictID.to_csv('submission.csv', index=False)


# ********** MAIN PROGRAM ********** #

x_tra, y_tra, x_tst = load_data(['train.csv', 'test.csv'])
x_tra_reduced, x_test_reduced = preprocessing(x_tra, y_tra, x_tst)

my_model = train_model(x_tra_reduced, y_tra)
my_predict = predict(my_model, x_test_reduced)
write_output(my_predict)
