"""
Target Problem:
---------------
* A classifier for the diagnosis of Autism Spectrum Disorder (ASD)

Proposed Solution (Machine Learning Pipeline):
----------------------------------------------
* Constant Feature Elimination -> PCA -> Decision Tree Regressor

Input to Proposed Solution:
---------------------------
* Directories of training and testing data in csv file format
* These two types of data should be stored in n x m pattern in csv file format.

  Typical Example:
  ----------------
  n x m samples in training csv file (n number of samples, m - 1 number of features, ground truth labels at last column)
  k x s samples in testing csv file (k number of samples, s number of features)

* These data set files are ready by load_data() function.
* For comprehensive information about input format, please check the section
  "Data Sets and Usage Format of Source Codes" in README.md file on github.

Output of Proposed Solution:
----------------------------
* Predictions generated by learning model for testing set
* They are stored in "submission.csv" file.

Code Owner:
-----------
* Copyright © Team 20. All rights reserved.
* Copyright © Istanbul Technical University, Learning From Data Spring 2019. All rights reserved. """

import csv
import warnings
import pandas as pd

from sklearn import tree
from sklearn.decomposition import PCA

warnings.simplefilter(action='ignore', category=FutureWarning)


def load_data(filename):
    return pd.read_csv(filename)


def preprocessing(train_set, test_set, nof_features):

    """
    The method at first discards constant features, since those features are affectless on classification.
    Then, train data set is decomposed into features and labels.
    Finally, the method synthesizes new 10 features for train and test data by using pca.

    Parameters
    ----------
    train_set: train data in data-frame format
    test_set: test data in data-frame format
    nof_features: number of features to be synthesized during pca
    """

    train_set = train_set.drop(['X3', 'X31', 'X32', 'X127', 'X128', 'X590'], axis=1)
    test_set = test_set.drop(['X3', 'X31', 'X32', 'X127', 'X128', 'X590'], axis=1)

    train_features = train_set.iloc[:, 0:589].values
    train_labels = train_set.iloc[:, 589].values
    test_features = test_set.iloc[:, 0:589].values

    pca = PCA(n_components=nof_features)
    extracted_train_features = pca.fit_transform(train_features)
    extracted_test_features = pca.transform(test_features)

    return extracted_train_features, train_labels, extracted_test_features


def train_model(train_x, train_y, test_x):

    """
    The method creates a Decision Tree Regressor model, and trains it by using train data.
    Then, the method predicts labels for testing samples by using regressor model.
    Those labels are returned.

    Parameters
    ----------
    train_x: features of train data
    train_y: labels of train data
    test_x: features of test data
    """

    model = tree.DecisionTreeRegressor(random_state=7)
    model.fit(train_x, train_y)
    return model.predict(test_x)


def write_output(predictions):

    with open('submission.csv', mode='w') as predicted_file:
        submission = csv.writer(predicted_file, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
        submission.writerow(['ID', 'Predicted'])

        a = 1
        for i in predictions:
            submission.writerow([str(a), int(i)])
            a = a + 1


# ********** MAIN PROGRAM ********** #

train_df = load_data('train.csv')
test_df = load_data('test.csv')

train_features, train_labels, test_features = preprocessing(train_df, test_df, 10)
predictions = train_model(train_features, train_labels, test_features)
write_output(predictions)
